{"ts":1380582988156,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var http        = require('http');\nvar path        = require('path');\nvar fs          = require('fs');\nvar async       = require('async');\nvar socketio    = require('socket.io');\nvar express     = require('express');\nvar router      = express();\nvar server      = http.createServer(router);\nvar io          = socketio.listen(server);\nvar sockets     = [];\nvar rooms       = {\n    lobby: {\n        name:       \"Lobby\",\n        private:    false,\n        users:      [],\n        joined:     0,\n        messages:   [],\n        created:    new Date(),\n        createdId:  null\n    }\n};\nrouter.use(express.static(path.resolve(__dirname, 'client')));\n/*\n * Simple Key/Pair Database files\n */\nvar Db = function(table){\n    if ('string'!==typeof table)return;\n    this.validJsonString = function(str) {\n        try {\n            JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n        return true;\n    };\n    this.dir = table;\n    this.store = [];\n    this.update = function(id,data){\n        this.store[id] = data;\n    };\n};\nDb.fn = Db.prototype = {\n    get: function( id, callback ) {\n        var fp = './db/'+this.dir+'/'+id+'.json';\n        var self = this;\n        fs.readFile(fp, 'utf8', function (err, data) {\n            if(err) { \n                console.log(err);\n                callback({});\n            }\n            else if ( self.validJsonString(data) ) {\n                var row = JSON.parse(data);\n                self.update(id, row);\n                callback(row);\n            }\n        });\n        return this;\n    },\n    set: function( id, data ) {\n        var fp = './db/' + this.dir + '/' + id + '.json';\n        var json = JSON.stringify(data);\n        var self = this;\n        fs.writeFile(fp, json, function (err) {\n          if(err) console.log(err);\n          self.update(id,data);\n        });\n        return this;\n    }\n};\n\n/*\n * Broadcast an event to all users\n */\nfunction emitEveryone(event, data) {\n  io.sockets.emit(event,data);\n}\n\nio.on('connection', function (socket) {\n    sockets.push(socket);\n    var emitOthers = function(e,data) {\n        socket.broadcast.emit(e,data);\n    };\n    var emitSelf = function(e,data) {\n        socket.emit(e,data);\n    };\n    var roomEmitOthers = function(room,e,data) {\n        socket.broadcast.to(room).emit(e,data);\n    };\n    var updateRecords = function() {\n        async.map(\n            sockets,\n            function (socket, callback) {\n                socket.get('profile', function (err, profile) {\n                    if (err) console.log(err);\n                    callback(null,{\n                        id:     profile.id,\n                        gid:    profile.gid,\n                        name:   profile.name,\n                        color:  profile.color,\n                        image:  profile.image,\n                        room:   profile.room\n                    });\n\n                });\n            },\n            function (err, users) {\n                emitEveryone('users', users);\n            }\n        );\n    };\n    var sid = socket.id;\n    var defaultProfile = {\n            id:     sid,\n            gid:    false,\n            name:   String('Anonymous'),\n            color:  String('#333'),\n            image:  String('/img/anonymous.gif'),\n            room:   String('lobby'),\n            settings: {\n                notifications:  false,\n                leave:          false,\n                join:           true,\n                login:          true,\n                lobby:          false,\n                messages:       10\n            }\n        };\n    var preferences = new Db('preferences');\n    /*\n     * Frontend Loaded\n     */\n    socket.on('connect', function (sid) {\n        socket.set('profile', defaultProfile );\n        socket.get('profile', function(err,profile) {\n            if (err) console.log(err);\n            try {\n                rooms.lobby.users.push(profile);\n                socket.join('lobby');\n                rooms.lobby.joined = rooms.lobby.users.length;\n                emitEveryone('rooms', rooms);\n                roomEmitOthers(profile.room,'roomUserJoin',profile);\n                emitSelf('myProfile', profile);\n                rooms[profile.room].messages.forEach(function (data) {\n                    emitSelf('message', data);\n                });\n            } catch (e) {\n                console.log(e);\n            }\n        });\n        updateRecords();\n    });\n    /*\n     * Google Login\n     */\n    socket.on('login', function (gapiData) {\n        socket.get('profile', function (err, profile) {\n            if (err) console.log(err);\n            try {\n                profile.gid = gapiData.id;\n                profile.image = gapiData.image.url;\n                preferences.get( gapiData.id, function(data) {\n                    if (data.color) profile.color = data.color;\n                    if (data.name) profile.name = data.name;\n                    if (data.settings) profile.settings = data.settings;\n                    socket.set('profile', profile, function (err) {\n                        if (err) console.log(err);\n                        updateRecords();\n                        emitSelf('myProfile', profile);\n                        roomEmitOthers(profile.room,'roomUserLogin',profile);\n                    });\n                    preferences.set( gapiData.id, profile );\n                });\n            } catch (e) {\n                console.log(e);\n            }\n        });\n    });\n    /*\n     * User Closed App\n     */\n    socket.on('disconnect', function () {\n        sockets.splice(sockets.indexOf(socket), 1);\n        socket.get('profile', function (err, profile) {\n            if (err) console.log(err);\n            try{ \n                rooms[profile.room].users.splice(rooms[profile.room].users.indexOf(profile), 1);\n                rooms[profile.room].joined = rooms[profile.room].users.length;\n                updateRecords();\n                roomEmitOthers(profile.room,'roomUserLeft',profile);\n                emitEveryone('rooms', rooms);\n            } catch (e) {\n                console.log(e);\n            }\n        });\n    });\n    /*\n     * Rooms\n     */\n    socket.on('createRoom', function (room) {\n        var lowerName = room.name.toLowerCase();\n        if (!rooms[lowerName] || rooms[lowerName].createdId === sid) {\n            rooms[lowerName] = {\n                name:       room.name,\n                private:    room.private,\n                password:   String( room.password || ''),\n                users:      [],\n                joined:     0,\n                messages:   [],\n                created:    new Date(),\n                createdId:  sid\n            };\n            emitEveryone('rooms', rooms);\n        } else if (rooms[lowerName].createdId !== sid) {\n            emitSelf('info','room exists');\n        }\n    });\n    socket.on('editRoom', function (room) {\n        var lowerName = room.name.toLowerCase();\n        if (rooms[lowerName].createdId === sid) {\n            rooms[lowerName].private = room.private;\n            rooms[lowerName].password = room.password;\n            emitEveryone('rooms', rooms);\n        } else if (rooms[lowerName].createdId !== sid) {\n            emitSelf('info','not allowed to edit');\n        }\n    });\n    socket.on('joinRoom', function (room) {\n        socket.get('profile', function(err,profile) {\n            if (err) console.log(err);\n            try {\n                if ( ( !rooms[room.name].private ) || ( \"undefined\" !== typeof room.password && rooms[room.name].password === room.password ) ) {\n                    rooms[profile.room].users.splice(rooms[profile.room].users.indexOf(profile), 1);\n                    socket.leave(profile.room);\n                    rooms[profile.room].joined = rooms[profile.room].users.length;\n                    roomEmitOthers(profile.room,'roomUserLeft',profile);\n        \n                    rooms[room.name].users.push(profile);\n                    socket.join(room.name);\n                    rooms[room.name].joined = rooms[room.name].users.length;\n                    roomEmitOthers(room.name,'roomUserJoin',profile);\n        \n                    profile.room = room.name;\n                    emitSelf('myProfile', profile);\n                    emitEveryone('rooms', rooms);\n                    updateRecords();\n                    rooms[profile.room].messages.forEach(function (data) {\n                        emitSelf('message', data);\n                    });\n                } else {\n                    emitSelf('info', \"incorrect password\");\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        });\n    });\n    /*\n     * Profile Updates\n     */\n    socket.on('saveSettings', function (settings) {\n        socket.get('profile', function(err,profile) {\n            if (err) console.log(err);\n            profile.settings = settings;\n            socket.set('profile', profile, function (err) {\n                if (err) console.log(err);\n            });\n            if (profile.gid) preferences.set( profile.gid, profile );\n        });\n    });\n    socket.on('updateName', function (name) {\n        socket.get('profile', function(err,profile) {\n            if (err) console.log(err);\n            profile.name = name;\n            socket.set('profile', profile, function (err) {\n                if (err) console.log(err);\n                updateRecords();\n            });\n            if (profile.gid) preferences.set( profile.gid, profile );\n        });\n    });\n    socket.on('updateColor', function (color) {\n        socket.get('profile', function(err,profile) {\n            if (err) console.log(err);\n            profile.color = color;\n            socket.set('profile', profile, function (err) {\n                if (err) console.log(err);\n                updateRecords();\n            });\n            if (profile.gid) preferences.set( profile.gid, profile );\n        });\n    });\n    /*\n     * New Message\n     */\n    socket.on('message', function (text) {\n        var resp = {\n          text: String(text || '')\n        };\n        socket.get('profile', function(err,profile) {\n            if (err) console.log(err);\n            try {\n                resp.color = profile.color;\n                resp.name  = profile.name;\n                resp.image = profile.image;\n                roomEmitOthers( profile.room , 'newMessage', resp );\n                emitSelf( 'message' , resp );\n                rooms[profile.room].messages.push(resp);\n                if ( rooms[profile.room].messages.length > 10 ) {\n                    rooms[profile.room].messages = rooms[profile.room].messages.slice(1,11);\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        });\n    });\n\n});\nserver.listen(process.env.PORT || 80, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":10945}]],"length":10945}
